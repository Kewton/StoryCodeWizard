
# 命令指示書
- 前提と現在のソースコードと要求と制約から最高の成果物を生成してください。

### 前提
'./front'ディレクトリにてNext.jsのフロントエンドを開発しています

### 制約
- アウトプットはmarkdown形式とすること
- 要求文書を適切な表現に変換すること
- UIの構成要素を言語化し、各コンポーネントとソースファイルの位置付けを明確にすること
- 新規にインストールが必要な場合、ライブラリのインストール方法を明確にすること
- 新規にファイル作成が必要な場合、名称と拡張子も明確にしソースコードをフルで出力すること
- git への commit コメントを出力すること

### 要求
現在のデッレクトリ構成をREADME.mdに出力したいです。

### 現在のpackage.json
 - filename:./front/package.json
```json
{
  "name": "my-nextjs-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.6.8",
    "next": "14.2.2",
    "react": "^18",
    "react-dom": "^18",
    "reconnecting-websocket": "^4.4.0",
    "styled-components": "^6.1.8"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.2",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

```


### 現在のソースコード
 - filename:./front/src/styles/globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

```

 - filename:./front/src/components/Layout.js
```js
import React, { useState } from 'react';
import styled from 'styled-components';
import Sidebar from './Sidebar';
import ChatWindow from './ChatWindow';
import DraggableBorder from './DraggableBorder';

const LayoutContainer = styled.div`
  display: flex;
  overflow-x: hidden;
  height: 100vh;
`;

const Layout = () => {
  const [isSidebarVisible, setIsSidebarVisible] = useState(true);

  return (
    <LayoutContainer>
      {isSidebarVisible && <Sidebar />}
      <DraggableBorder $isVisible={isSidebarVisible} onClick={() => setIsSidebarVisible(!isSidebarVisible)} />
      <ChatWindow isSidebarVisible={isSidebarVisible} />
    </LayoutContainer>
  );
};

export default Layout;

```

 - filename:./front/src/components/DraggableBorder.js
```js
import styled from 'styled-components';

const DraggableBorder = styled.div`
  width: ${props => props.$isVisible ? '5px' : '10px'}; // トランジェントプロパティを使用
  cursor: ew-resize;
  background-color: #ccc;
  display: flex;
  justify-content: center;
`;

const ToggleArea = styled.div`
  width: 100%;
  // 縦方向の幅を狭めるために、height を 15px に変更します
  height: 15px;
  background-color: ${props => props.$isVisible ? '#aaa' : '#888'};  // トランジェントプロパティを使用
`;

const DraggableBorderComponent = ({ isVisible, onClick }) => (
  <DraggableBorder $isVisible={isVisible} onClick={onClick}>
    <ToggleArea $isVisible={isVisible} />
  </DraggableBorder>
);

export default DraggableBorderComponent;
```

 - filename:./front/src/components/Sidebar.js
```js
// components/Sidebar.js
import styled from 'styled-components';

const SidebarContainer = styled.div`
  width: 250px;
  background-color: #222;
  height: 100vh;
  padding: 20px;
  box-sizing: border-box;
`;

const Sidebar = () => {
  return (
    <SidebarContainer>
      {/* サイドバーの内容をここに追加します */}
      <p>Chat Rooms</p>
    </SidebarContainer>
  );
};

export default Sidebar;

```

 - filename:./front/src/components/ChatWindow.js
```js
import React, { useState, useEffect } from 'react';
import styled from 'styled-components';

const Container = styled.div`
  background-color: #333;
  color: white;
  flex-grow: ${props => props.$isSidebarVisible ? 1 : 2};  // サイドバーの可視性に基づいて flex-grow を動的に変更
  transition: flex-grow 0.3s ease;  // flex-grow の変更にアニメーションを適用
  padding: 20px;
  width: 100%;
`;

const MessageList = styled.ul`
  list-style: none;
  padding: 0;
  overflow-y: auto;
`;

const Message = styled.li`
  margin-bottom: 10px;
  padding: 10px;
  background-color: ${props => props.isUser ? '#555' : '#444'};
  border-radius: 10px;
  align-self: ${props => props.isUser ? 'flex-end' : 'flex-start'};
`;

const InputContainer = styled.div`
  position: fixed;
  bottom: 0;
  width: calc(100% - 40px);  // パディングを考慮して幅を調整
`;

const Input = styled.input`
  width: 100%;
  padding: 10px;
  border: none;
  border-radius: 5px;
  background-color: #fff;
  color: #333;
`;

const ChatWindow = ({ isSidebarVisible }) => {
  const [messages, setMessages] = useState([]);
  const [message, setMessage] = useState('');

  // サイドバーの表示状態が変わった時にレンダリングをトリガー
  useEffect(() => {
    const forceUpdate = () => {
      const container = document.querySelector('#chat-container');
      if (container) {
        container.style.display = 'none';
        requestAnimationFrame(() => {
          container.style.display = 'flex';
        });
      }
    };
    forceUpdate();
  }, [isSidebarVisible]);

  const handleMessageChange = (event) => {
    setMessage(event.target.value);
  };

  const handleKeyPress = (event) => {
    if (event.key === 'Enter' && message.trim()) {
      setMessages([...messages, { text: message, isUser: true }]);
      setTimeout(() => {
        setMessages(prev => [...prev, { text: `System reply to "${message}"`, isUser: false }]);
      }, 500);
      setMessage('');
    }
  };

  return (
    <Container id="chat-container" $isSidebarVisible={isSidebarVisible}>
      <MessageList>
        {messages.map((msg, index) => (
          <Message key={index} isUser={msg.isUser}>
            {msg.text}
          </Message>
        ))}
      </MessageList>
      <InputContainer>
        <Input
          value={message}
          onChange={handleMessageChange}
          onKeyPress={handleKeyPress}
          placeholder="Type a message..."
        />
      </InputContainer>
    </Container>
  );
};

export default ChatWindow;

```

 - filename:./front/src/pages/index.tsx
```tsx
import Layout from '../components/Layout';

export default function Home() {
  return <Layout />;
}
```

 - filename:./front/src/pages/_document.tsx
```tsx
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

```

 - filename:./front/src/pages/_app.tsx
```tsx
import "@/styles/globals.css";
import type { AppProps } from "next/app";

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />;
}

```

 - filename:./front/src/pages/api/hello.ts
```ts
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  name: string;
};

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>,
) {
  res.status(200).json({ name: "John Doe" });
}

```


    