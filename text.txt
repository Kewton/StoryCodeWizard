{"role": "user", "content": "\n        前提と現在のソースコードと要求と制約から最高の成果物を生成してください。\n \n        # 前提\n        -\"./front\"ディレクトリにてNext.jsのフロントエンドを開発しています\n\n        # 制約\n        - 新規にインストールが必要なライブラリを明確にすること\n        - 新規に作成が必要なファイル名を明確にすること\n        - 各コンポーネントの全体における位置付けを明確にすること\n\n        # 要求\n        DraggableBorderの縦方向の幅を狭めてください。\n\n        # 現在のpackage.json\n        - filename:./front/package.json\n\\`\\`\\`\n{\n  \\"name\\": \\"my-nextjs-frontend\\",\n  \\"version\\": \\"0.1.0\\",\n  \\"private\\": true,\n  \\"scripts\\": {\n    \\"dev\\": \\"next dev\\",\n    \\"build\\": \\"next build\\",\n    \\"start\\": \\"next start\\",\n    \\"lint\\": \\"next lint\\"\n  },\n  \\"dependencies\\": {\n    \\"axios\\": \\"^1.6.8\\",\n    \\"next\\": \\"14.2.2\\",\n    \\"react\\": \\"^18\\",\n    \\"react-dom\\": \\"^18\\",\n    \\"reconnecting-websocket\\": \\"^4.4.0\\",\n    \\"styled-components\\": \\"^6.1.8\\"\n  },\n  \\"devDependencies\\": {\n    \\"@types/node\\": \\"^20\\",\n    \\"@types/react\\": \\"^18\\",\n    \\"@types/react-dom\\": \\"^18\\",\n    \\"eslint\\": \\"^8\\",\n    \\"eslint-config-next\\": \\"14.2.2\\",\n    \\"postcss\\": \\"^8\\",\n    \\"tailwindcss\\": \\"^3.4.1\\",\n    \\"typescript\\": \\"^5\\"\n  }\n}\n\n\\`\\`\\`\n\n\n        # 現在のソースコード\n        - filename:./front/src/styles/globals.css\n\\`\\`\\`\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 0, 0, 0;\n  --background-start-rgb: 214, 219, 220;\n  --background-end-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --foreground-rgb: 255, 255, 255;\n    --background-start-rgb: 0, 0, 0;\n    --background-end-rgb: 0, 0, 0;\n  }\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: linear-gradient(\n      to bottom,\n      transparent,\n      rgb(var(--background-end-rgb))\n    )\n    rgb(var(--background-start-rgb));\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n\\`\\`\\`\n\n- filename:./front/src/components/Layout.js\n\\`\\`\\`\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Sidebar from \"./Sidebar\";\nimport ChatWindow from \"./ChatWindow\";\nimport DraggableBorder from \"./DraggableBorder\";\n\nconst LayoutContainer = styled.div`\n  display: flex;\n  overflow-x: hidden;\n  height: 100vh;\n`;\n\nconst Layout = () => {\n  const [isSidebarVisible, setIsSidebarVisible] = useState(true);\n\n  return (\n    <LayoutContainer>\n      {isSidebarVisible && <Sidebar />}\n      <DraggableBorder $isVisible={isSidebarVisible} onClick={() => setIsSidebarVisible(!isSidebarVisible)} />\n      <ChatWindow isSidebarVisible={isSidebarVisible} />\n    </LayoutContainer>\n  );\n};\n\nexport default Layout;\n\n\\`\\`\\`\n\n- filename:./front/src/components/DraggableBorder.js\n\\`\\`\\`\nimport styled from \"styled-components\";\n\nconst DraggableBorder = styled.div`\n  width: ${props => props.$isVisible ? \"5px\" : \"10px\"}; // トランジェントプロパティを使用\n  cursor: ew-resize;\n  background-color: #ccc;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ToggleArea = styled.div`\n  width: 100%;\n  height: 30px;\n  background-color: ${props => props.$isVisible ? \"#aaa\" : \"#888\"};  // トランジェントプロパティを使用\n`;\n\nconst DraggableBorderComponent = ({ isVisible, onClick }) => (\n  <DraggableBorder $isVisible={isVisible} onClick={onClick}>\n    <ToggleArea $isVisible={isVisible} />\n  </DraggableBorder>\n);\n\nexport default DraggableBorderComponent;\n\n\\`\\`\\`\n\n- filename:./front/src/components/Sidebar.js\n\\`\\`\\`\n// components/Sidebar.js\nimport styled from \"styled-components\";\n\nconst SidebarContainer = styled.div`\n  width: 250px;\n  background-color: #222;\n  height: 100vh;\n  padding: 20px;\n  box-sizing: border-box;\n`;\n\nconst Sidebar = () => {\n  return (\n    <SidebarContainer>\n      {/* サイドバーの内容をここに追加します */}\n      <p>Chat Rooms</p>\n    </SidebarContainer>\n  );\n};\n\nexport default Sidebar;\n\n\\`\\`\\`\n\n- filename:./front/src/components/ChatWindow.js\n\\`\\`\\`\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  background-color: #333;\n  color: white;\n  flex-grow: ${props => props.$isSidebarVisible ? 1 : 2};  // サイドバーの可視性に基づいて flex-grow を動的に変更\n  transition: flex-grow 0.3s ease;  // flex-grow の変更にアニメーションを適用\n  padding: 20px;\n  width: 100%;\n`;\n\nconst MessageList = styled.ul`\n  list-style: none;\n  padding: 0;\n  overflow-y: auto;\n`;\n\nconst Message = styled.li`\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: ${props => props.isUser ? \"#555\" : \"#444\"};\n  border-radius: 10px;\n  align-self: ${props => props.isUser ? \"flex-end\" : \"flex-start\"};\n`;\n\nconst InputContainer = styled.div`\n  position: fixed;\n  bottom: 0;\n  width: calc(100% - 40px);  // パディングを考慮して幅を調整\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  background-color: #fff;\n  color: #333;\n`;\n\nconst ChatWindow = ({ isSidebarVisible }) => {\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  // サイドバーの表示状態が変わった時にレンダリングをトリガー\n  useEffect(() => {\n    const forceUpdate = () => {\n      const container = document.querySelector(\"#chat-container\");\n      if (container) {\n        container.style.display = \"none\";\n        requestAnimationFrame(() => {\n          container.style.display = \"flex\";\n        });\n      }\n    };\n    forceUpdate();\n  }, [isSidebarVisible]);\n\n  const handleMessageChange = (event) => {\n    setMessage(event.target.value);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\" && message.trim()) {\n      setMessages([...messages, { text: message, isUser: true }]);\n      setTimeout(() => {\n        setMessages(prev => [...prev, { text: `System reply to \\"${message}\\"`, isUser: false }]);\n      }, 500);\n      setMessage(\"\");\n    }\n  };\n\n  return (\n    <Container id=\\"chat-container\\" $isSidebarVisible={isSidebarVisible}>\n      <MessageList>\n        {messages.map((msg, index) => (\n          <Message key={index} isUser={msg.isUser}>\n            {msg.text}\n          </Message>\n        ))}\n      </MessageList>\n      <InputContainer>\n        <Input\n          value={message}\n          onChange={handleMessageChange}\n          onKeyPress={handleKeyPress}\n          placeholder=\\"Type a message...\\"\n        />\n      </InputContainer>\n    </Container>\n  );\n};\n\nexport default ChatWindow;\n\n\\`\\`\\`\n\n- filename:./front/src/pages/index.tsx\n\\`\\`\\`\nimport Layout from \"../components/Layout\";\n\nexport default function Home() {\n  return <Layout />;\n}\n\\`\\`\\`\n\n- filename:./front/src/pages/_document.tsx\n\\`\\`\\`\nimport { Html, Head, Main, NextScript } from \\"next/document\\";\n\nexport default function Document() {\n  return (\n    <Html lang=\\"en\\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n\n\\`\\`\\`\n\n- filename:./front/src/pages/_app.tsx\n\\`\\`\\`\nimport \\"@/styles/globals.css\\";\nimport type { AppProps } from \\"next/app\\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />;\n}\n\n\\`\\`\\`\n\n- filename:./front/src/pages/api/hello.ts\n\\`\\`\\`\n// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport type { NextApiRequest, NextApiResponse } from \\"next\\";\n\ntype Data = {\n  name: string;\n};\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>,\n) {\n  res.status(200).json({ name: \\"John Doe\\" });\n}\n\n\\`\\`\\`\n\n        "}